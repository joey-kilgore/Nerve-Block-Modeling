//D. Michael Ackermann
//6/22/08
//Filename = MRGaxonv2_0_101nodes.hoc
//Version = 2.0
//Desc = MRG axon model definition file, modified to include the following
//1. GUI box to select axon diameter



/*--------------------------------------------------------------------
2/02
Cameron C. McIntyre
SIMULATION OF PNS MYELINATED AXON

This model is described in detail in:

McIntyre CC, Richardson AG, and Grill WM. Modeling the excitability of
mammalian nerve fibers: influence of afterpotentials on the recovery
cycle. Journal of Neurophysiology 87:995-1006, 2002.

This model can not be used with NEURON v5.1 as errors in the
extracellular mechanism of v5.1 exist related to xc. The original
stimulations were run on v4.3.1. NEURON v5.2 has corrected the 
limitations in v5.1 and can be used to run this model.
----------------------------------------------------------------------*/


//***************************************************************
//  variables
//***************************************************************


//topological parameters//
	stinnum = 6  // number of STIN 		
	axonnodes=101  			
	paranodes1=2*(axonnodes-1)
	paranodes2=2*(axonnodes-1)	
	axoninter=stinnum*(axonnodes-1)
	axontotal=axonnodes+paranodes1+paranodes2+axoninter			 
	 
//morphological parameters//	
	fiberD=10.0	//choose from 7.3, 8.7, 10.0, 11.5, 12.8, 14.0, 15.0, 16.

	celsius=37			
	v_init=-80 //mV//  		
	dt=0.005 //ms//         	
	tstop=10
	paralength1=3  
	nodelength=1.0
	space_p1=0.002  
	space_p2=0.004
	space_i=0.004

//electrical parameters//		
	rhoa=0.7e6 //Ohm-um//
	rhoe=5.0e6
	mycm=0.1 //uF/cm2/lamella membrane//
	mygm=0.001 //S/cm2/lamella membrane//


//Calculate position of compartments in 2-D

objref x

x=new Vector(axontotal,0)

create node[axonnodes], MYSA[paranodes1], FLUT[paranodes2], STIN[axoninter]
access node[0]	//APD


//***************************************************************
//  procedures
//***************************************************************

proc xypos(){
	x.x[0]=(-deltax*((axonnodes-1)/2))
	for (i=0;i<=axontotal-2;i=i+stinnum+5) {
		x.x[1+i]=x.x[0+i]+(nodelength/2)+(paralength1/2)
		x.x[2+i]=x.x[1+i]+(paralength1/2)+(paralength2/2)
		x.x[3+i]=x.x[2+i]+(paralength2/2)+(interlength/2)

		for (j = 3; j<= stinnum+1; j = j+1) {
			x.x[j+1+i]=x.x[j+i]+(interlength)
		}

		x.x[stinnum+3+i]=x.x[stinnum+2+i]+(interlength/2)+(paralength2/2)	
		x.x[stinnum+4+i]=x.x[stinnum+3+i]+(paralength2/2)+(paralength1/2)
		x.x[stinnum+5+i]=x.x[stinnum+4+i]+(paralength1/2)+(nodelength/2)
		}
}

///Defining morphological parameters

proc change_morphological() { //initialize all of the variables that are dependent on the fiber diameter
	if (fiberD==5.7) {g=0.605 axonD=3.4 nodeD=1.9 paraD1=1.9 paraD2=3.4 deltax=500 paralength2=35 nl=80}
	if (fiberD==7.3) {g=0.630 axonD=4.6 nodeD=2.4 paraD1=2.4 paraD2=4.6 deltax=750 paralength2=38 nl=100}
	if (fiberD==8.7) {g=0.661 axonD=5.8 nodeD=2.8 paraD1=2.8 paraD2=5.8 deltax=1000 paralength2=40 nl=110}
	if (fiberD==10.0) {g=0.690 axonD=6.9 nodeD=3.3 paraD1=3.3 paraD2=6.9 deltax=1150 paralength2=46 nl=120}
	if (fiberD==11.5) {g=0.700 axonD=8.1 nodeD=3.7 paraD1=3.7 paraD2=8.1 deltax=1250 paralength2=50 nl=130}
	if (fiberD==12.8) {g=0.719 axonD=9.2 nodeD=4.2 paraD1=4.2 paraD2=9.2 deltax=1350 paralength2=54 nl=135}
	if (fiberD==14.0) {g=0.739 axonD=10.4 nodeD=4.7 paraD1=4.7 paraD2=10.4 deltax=1400 paralength2=56 nl=140}
	if (fiberD==15.0) {g=0.767 axonD=11.5 nodeD=5.0 paraD1=5.0 paraD2=11.5 deltax=1450 paralength2=58 nl=145}
	if (fiberD==16.0) {g=0.791 axonD=12.7 nodeD=5.5 paraD1=5.5 paraD2=12.7 deltax=1500 paralength2=60 nl=150}
	Rpn0=(rhoa*.01)/(PI*((((nodeD/2)+space_p1)^2)-((nodeD/2)^2)))
	Rpn1=(rhoa*.01)/(PI*((((paraD1/2)+space_p1)^2)-((paraD1/2)^2)))
	Rpn2=(rhoa*.01)/(PI*((((paraD2/2)+space_p2)^2)-((paraD2/2)^2)))
	Rpx=(rhoa*.01)/(PI*((((axonD/2)+space_i)^2)-((axonD/2)^2)))
	interlength=(deltax-nodelength-(2*paralength1)-(2*paralength2))/6

	xypos()
}


// $1 mechanism to add.  A value of 0 is no change of mechanism
proc initialize(){  //initialize all sections of the model with relevant properties
	for i=0,axonnodes-1 {
		node[i]{					
			nseg=1
			diam=nodeD
			L=nodelength
			Ra=rhoa/10000
			cm=2
			//insert extracellular xraxial=Rpn0 xg=1e10 xc=0
		
			print $1
			if ($1 == 1){  
				if (mechsel[0] == 1){
					insert axnode
				} else {
					uninsert axnode
				}
			}
			if ($1 == 2){  
				if (mechsel[1] == 1){
					insert AXNODEKExt		//inserts HH dynamics
				} else {
					uninsert AXNODEKExt	//inserts HH dynamics
				}
			}
			if ($1 == 3){  
				if (mechsel[2] == 1){
					insert KExtNodefh   	//inserts potassium accumulation FH params
				} else {
					uninsert KExtNodefh   	//inserts potassium accumulation FH params
				}
			}
			if ($1 == 4){  
				if (mechsel[3] == 1){
					insert KExtNodeNsh   	//inserts potassium accumulation Node Shell
				} else {
					uninsert KExtNodeNsh   	//inserts potassium accumulation Node Shell
				}
			}
			if ($1 == 5){  
				if (mechsel[4] == 1){
					insert KExtNodediff   	//inserts potassium accumulation diffusion
				} else {
					uninsert KExtNodediff  	//inserts potassium accumulation diffusion
				}
			}
			if ($1 == 6){  
				if (mechsel[5] == 1){
					insert KIntNode		//inserts potassium intracellular constant
				} else {
					uninsert KIntNode		//inserts potassium intracellular constant
				}
			}
			if ($1 == 7){  
				if (mechsel[6] == 1){
					insert KIntNodeND	  	//inserts potassium intracellular constant no diffusion
				} else {
					uninsert KIntNodeND	//inserts potassium intracellular constant no diffusion
				}
			}
			if ($1 == 8){  
				if (mechsel[7] == 1){
					insert NaExtNode   	//inserts sodium extracellular constant
				} else {
					uninsert NaExtNode   	//inserts sodium extracellular constant
				}
			}
			if ($1 == 9){  
				if (mechsel[8] == 1){
					insert NaExtNodeND   	//inserts sodium extracellular constant no diffusion
				} else {
					uninsert NaExtNodeND   	//inserts sodium extracellular constant no diffusion
				}
			}
			if ($1 == 10){  
				if (mechsel[9] == 1){
					insert NaIntNode   	//inserts sodium intracellular constant 
				} else {
					uninsert NaIntNode   	//inserts sodium intracellular constant
				}
			}
			if ($1 == 11){  
				if (mechsel[10] == 1){
					insert KExtNodeBell	//inserts potassium extracellular accumulation from Belliger model
				} else {
					uninsert KExtNodeBell	//inserts potassium extracellular accumulation from Belliger model
				}
			}
			if ($1 == 12){  
				if (mechsel[11] == 1){
					insert NaKpump	  	//inserts sodium potassium pump
				} else {
					uninsert NaKpump	  	//inserts sodium potassium pump
				}
			}
			insert extracellular xraxial=Rpn0 xg=1e10 xc=0


		}
	}
	for i=0, paranodes1-1 {
		MYSA[i]{
			nseg=1
			diam=fiberD
			L=paralength1
			Ra=rhoa*(1/(paraD1/fiberD)^2)/10000
			cm=2*paraD1/fiberD
			insert pas
			g_pas=0.001*paraD1/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn1 xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
	for i=0, paranodes2-1 {
		FLUT[i]{
			nseg=1
			diam=fiberD
			L=paralength2
			Ra=rhoa*(1/(paraD2/fiberD)^2)/10000
			cm=2*paraD2/fiberD
			insert pas
			g_pas=0.0001*paraD2/fiberD		
			e_pas=v_init
			insert extracellular xraxial=Rpn2 xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
	for i=0, axoninter-1 {
		STIN[i]{
			nseg=1
			diam=fiberD
			L=interlength
			Ra=rhoa*(1/(axonD/fiberD)^2)/10000
			cm=2*axonD/fiberD
			insert pas
			g_pas=0.0001*axonD/fiberD
			e_pas=v_init
			insert extracellular xraxial=Rpx xg=mygm/(nl*2) xc=mycm/(nl*2)
			}
	}
	for i=0, axonnodes-2 {
		connect MYSA[2*i](0), node[i](1)
		connect FLUT[2*i](0), MYSA[2*i](1)
		connect STIN[stinnum*i](0), FLUT[2*i](1)
		connect STIN[stinnum*i+1](0), STIN[stinnum*i](1)

		for j=1, stinnum-2 {
			connect STIN[stinnum*i+j+1](0), STIN[stinnum*i+j](1)
		}

		connect FLUT[2*i+1](0), STIN[stinnum*i+stinnum-1](1)
		connect MYSA[2*i+1](0), FLUT[2*i+1](1)
		connect node[i+1](0), MYSA[2*i+1](1)	
		}
	
	finitialize(v_init)
	fcurrent()
}


//***************************************************************
//  main
//***************************************************************

change_morphological()

initialize(1)


