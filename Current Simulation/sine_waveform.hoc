
//***************************************************************
//  variables
//***************************************************************

/*Create and initialize sections and point processes*/
create sinelec1,sinelec2,sinelec3
objref sinClmp1,sinClmp2,sinClmp3

sinClmp1 = new IClampSine() 
sinClmp2 = new IClampSine()
sinClmp3 = new IClampSine()

// Sine waveform boxes
objref sinebox
sinebox = new VBox()


//***************************************************************
//  procedures
//***************************************************************



//*********************************************************************
//  sine waveform and their handling routines
//*********************************************************************

proc setoffset(){
	offset = $1
	sinestim()
}



proc sinebox_Vbox() {

	sinebox.intercept(1)
	xpanel("")
	xvalue("Amplitude(nA)","amp1",1,"sine_val()",1)
	xvalue("Frequency(1/s)","freq",1,"sinestim()",1)
	xvalue("offset(nA)","offset",1,"sinestim()",1)
	xpanel()

	xpanel("")
	xvalue("Pulse Train Onset(ms)", "onset1",1,"call_procstim(1)",1)
	xvalue("Pulse Train Duration(ms)","dur1",1,"call_procstim(1)",1)
	xpanel()
	sinebox.intercept(0)
}

proc sine_panel(){

	if(sinebox.ismapped() == 0) {
		sinebox.map("HFAC Sine Parameters", 30, 465, -1, -1)
	}

	sine_val()
	sinestim()

}

proc sine_val(){

	if (electsel[0]==1) {
		amp2 = 0
		amp3 = 0
	}

	if (electsel[1]==1) {
		amp2 = -1*amp1
		amp3 = 0
	}


	if (electsel[2]==1) {
		amp1 = -.5*amp2
		amp3 = amp1
	}

	sinestim()
}


// update sine parameters for the different electrode types
proc sinestim(){ local i


	// one point source or FEM
	sinelec1 {
		
		sinClmp1.loc(0.5)
		sinClmp1.del=onset1
		sinClmp1.amp=amp1
		sinClmp1.dur=dur1
		sinClmp1.f = freq
		sinClmp1.offset = offset
	}

      // 2nd point source
	sinelec2 {
			
		sinClmp2.loc(0.5)
		sinClmp2.del=onset2
		sinClmp2.amp=amp2
		sinClmp2.dur=dur2
		sinClmp2.f = freq
		sinClmp2.offset = offset
	}

      // 3rd point source
	sinelec3 {
		sinClmp3.loc(0.5)
		sinClmp3.del=onset3
		sinClmp3.amp=amp3
		sinClmp3.dur=dur3
		sinClmp3.f = freq
		sinClmp3.offset = offset
	}
	
}

proc sineadvance() {
//		position_move()

		a = 0
    		for (i=0;i<=axontotal-1;i=i+stinnum+5) {
    		
    			node[a].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6)+ (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6) //mV//
    		
    			a = a+1
    		}
    		b=0 
    		for (i=1;i<=axontotal-1;i=i+stinnum+5) {
    			MYSA[b].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6)+ (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6) //mV//
    		
    			b=b+2
    		}
    		c=0 
    		for (i=2;i<=axontotal-1;i=i+stinnum+5) {
    			FLUT[c].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6)+ (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6) //mV//
    					c=c+2
    		}

		for (j = 0;j<=stinnum-1;j=j+1) {
			d=j 
			for (i=3;i<=axontotal-1;i=i+stinnum+5) {
    				STIN[d].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6)+ (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6) //mV//
				d=d+stinnum
			}
		}

    		k=1 
    		for (i=9;i<=axontotal-2;i=i+stinnum+5) {
    			FLUT[k].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6)+ (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6) //mV//
    		
    			k=k+2
    		}
    		l=1
    		for (i=10;i<=axontotal-2;i=i+stinnum+5) {
    			MYSA[l].e_extracellular(0.5)=(sinClmp1.i*ext1.x[i]*1e-6) + (sinClmp2.i*ext2.x[i]*1e-6)+ (sinClmp3.i*ext3.x[i]*1e-6)
    		
    			l=l+2
    		}

}

//***************************************************************
//  main
//***************************************************************

sinebox_Vbox()
sinestim()

