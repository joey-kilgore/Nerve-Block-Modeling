// Multiple_Simulations is a compilation of multiple tests each having a specific purpose
// These tests are not meant to be run from a UI but are instead a predefined set of instructions
//  that will often run multiple simulations and from this try and show some effect in the simulatins
//  They could be as simple as finding a block threshold across changing frequencies or changing diameters
//  The point is that these procedures are set simulations each having a specific experiment they conduct

proc varyGnabar(){
    // varyGnabar looks at the gnabar (Na conductance) variable, and shows what occurs when the
    //  value is changed from its initial state (3.0) to 3.3
    
    // Initial Conditions for Experiment :
    // Number of electrodes = 1
    // Waveform shape = Sine wave
    // offset = 0nA
    // Frequency = 10kHz
    // Amplitude = 600000nA (known block)
    // pulse train onset = 10ms 
    // pulse train duration = 300ms

    // Number of axonnodes = 101
    // axon diameter = 10um
    // dt = .005ms
    // Tstop = 150ms
    // init = -80mV

    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set frequency
    freq = 10000
    // set the amplitude
    amp1 = 576000
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()

    // set tstop
    tstop = 150
    // set initial voltage
    v_init = -80

    // turn off test stimulus
    setStim(0,0,0)

    // Two simulations will be run.
    // The first will have the default value of gnabar (3.0)
    // The second will have the value of 3.3 for gnabar for all axnodes
    firstGnabar = 3.0
    secondGnabar = 3.3
    
    // First simulation
    setGnabarForAllAxnodes(firstGnabar)
    run()
    // Second simulation
    setGnabarForAllAxnodes(secondGnabar)
    run()
}

proc setGnabarForAllAxnodes(){
    // set gnabar value for all axnodes in the model
    for i=0,axonnodes-1 {
        node[i].gnabar_axnode = $1
    }
}

proc setGnabarForSomeAxnodes(){
    // set gnabar value for axnodes within a certain range from the center
    //  the range is the value passed
    //  for example if 5 is passed as a parameter, than the center node
    //   is changed to the value, and nodes 5 to the left and right are also set
    
    rangeNum = $1
    valueNum = $2

    // set value of center node
    node[(axonnodes-1)/2].gnabar_axnode = valueNum

    // loop through the range
    for(i=1; i<=rangeNum; i = i+1){
        // set the nodes to the left and right to the value passed
        node[(axonnodes-1)/2 + i].gnabar_axnode = valueNum
        node[(axonnodes-1)/2 - i].gnabar_axnode = valueNum
    }

}

proc changeGnabarFromCenter(){
    // this experiment looks at how adjusting the gnabar value effects the block threshold
    // This starts by changing only the center node, then
    //  increases the number of nodes changed on each side of the center node
    // One parameter passed, the value that the center nodes gnabar will be set to

    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set frequency
    freq = 10000
    // set the amplitude
    amp1 = 576000
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()

    // first run the findThreshold with no changed gnabar values
    setGnabarForAllAxnodes(3.0)
    print "No changed nodes"
    findThreshold(400000,600000,0,10,50,.1,1,1000)

    // loop till 14 nodes on each side of the center node, and the center node have changed 
    for(numNodes=0; numNodes<15; numNodes=numNodes+2){
        // reset all gnabar values
        setGnabarForAllAxnodes(3.0)
        // set the values for center nodes
        setGnabarForSomeAxnodes(numNodes,$1)
        // print the set being tested
        print "Range of set nodes", numNodes
        // find the block threshold
        findThreshold(400000,600000,0,10,50,.1,1,2000)
    }
}

proc onsetDCSine(){ localobj apVector1, apVector2
    // Set the waveform to DC sine wave
    waveform_sel(4)

    // First the setup needs to determine what the DC block threshold is
    dconset = 10
    dcdur = 200
    sineonset = 0
    sinedur = 0
    dcsinestim()
    // Now the block threshold for a purely DC current is calculated
    dcblock = findThreshold(-500000, -100000, 0, 10, 50, .1, 1, 1000)

    // Second the setup needs to determing the sine block threshold
    dconset = 0
    dcdur = 0
    sineonset = 10
    sinedur = 200
    sinef = 20000
    dcsinestim()
    // Now the block threshold for a purely Sinusoidal current is calculated
    sineblock = findThreshold(300000, 900000, 0, 10, 50, .1, 1, 1000)

    apVector1 = new Vector()
    apVector2 = new Vector()
    apcDistal.record(apVector1)
    apcProximal.record(apVector2)

    for(newDur=10; newDur<=100; newDur+=10){
        print "DC Duration,", newDur
        for (mult=0; mult<=3; mult+=.5){
            dconset = 10
            dcdur = newDur
            dcamp = dcblock*mult
            sineonset = dconset+dcdur
            sinedur = 300
            sinef = 20000
            sineamp = sineblock
            dcsinestim()
            tstop = 200
            setStim(0,0,0)
            run()
            print dcamp, dcdur, sineonset
            print "Distal (left)"
            for i=0, apVector1.size()-1{
                print apVector1.x[i]
            }
            print "Proximal (right)"
            for i=0, apVector2.size()-1{
                print apVector2.x[i]
            }
        }
    }
}

proc findBlockTime(){ local blocked, stimDelTime localobj newStim, apcTest, apcVec
    // This experiment looks to find the time till block
    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set frequency
    freq = 10000
    // set the amplitude just above block for 10um axon
    amp1 = 600000
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()
    // turn off threshfinder stim
    setStim(0,0,0)
    tstop = 50
    // a test pulse will be sent immediately after the last onset AP
    //  there is a period of time after the last AP within which there is no block
    minTestPulseDel = 0
    numAPs = 0
    resolution = .01    // resolution of search for min time, in ms
    APC_reset()
    for testNode = 30, 40{
        print testNode
        if(testNode == 30){
            // setup APCount object at the test site
            node[testNode] apcTest = new APCount(.5)
            apcVec = new Vector()
            apcTest.record(apcVec)
            run()
            minTestPulseDel = apcVec.x[apcVec.size()-1]
            numAPs = apcTest.n
            print minTestPulseDel
            print numAPs
        } 
        node[testNode] newStim = new IClamp(.5)
        newStim.amp = 30
        newStim.dur = .1
        upper = minTestPulseDel + 3
        print "Upper,", upper
        lower = minTestPulseDel + .5
        print "Lower,", lower
        while(abs(upper-lower)>resolution){
            APC_reset()
            testDel = (upper + lower)/2
            print "testDel,",testDel
            newStim.del = testDel
            run()
            if(APC_getCount(1) == numAPs){
                // there was a block, and the time can be reduced
                upper = testDel
            } else if(APC_getCount(1) > numAPs){
                // there was no block, and the time should be increased
                lower = testDel
            } else if(APC_getCount(1)<numAPs){
                // something very wrong has occured, there are more APs on the side without stimulus
                break
            }
        }
        print upper
    }
}

proc findNoBlockTime(){ local curThreshold, testDel, numTrials, minDel, maxDel, blockTest, testAmp
    // I noticed that while testing, if the test pulse is
    //  late enough (while testing at block threshold) the
    //  test pulse will not be blocked.

    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()

    testDel = 40

    curThreshold = findThreshold(550000,600000,0,10,testDel,.1,1,1000)

    amp1 = curThreshold
    sinestim()
    numTrials = 0
    while(numTrials<5){
        testAmp = curThreshold+numTrials*3000
        print "CURRENT AMP,", testAmp
        minDel = 40
        maxDel = 70
        while(abs(minDel-maxDel)>.5){
            testDel = (minDel+maxDel)/2
            amp1 = testAmp
            sinestim()
            blockTest = testWaveForm(10,testDel,.1,testAmp,1)
            if(blockTest == 1){
                minDel = testDel
            }else{
                maxDel = testDel
            }
        }
        print "NO BLOCK AFTER,", maxDel
        numTrials+=1
    }
}
    
proc conductionVelocity(){ local testNodeNum,totalVelocity,prevTime localobj APCounter, APCVec, newStim
    // conductionVelocity(testNum) has two seperate tests it can perform.
    // $1 == 0
    // The first finds the conduction velocity at each node, and is used for measuring velocities
    //  during HFAC block
    //
    // $1 == 1
    // The Second finds the velocity of a single action potential across the entire axon
    if($1 == 0){
        node[0] newStim = new IClamp(.5)
        newStim.dur = .1
        newStim.del = 40.05
        newStim.amp = 10
        setStim(0,0,0)
        tstop = 40
        dt = .005
        run()
        tstop = 100
        dt = dt/20
        for testNodeNum=4, axonnodes-1{      
            if(testNodeNum<45 || testNodeNum>55){
                node[testNodeNum] APCounter = new APCount(.5)
                APCounter.thresh = 0
                APCVec = new Vector()
                APCounter.record(APCVec)
                while(APCounter.n == 0){
                    steprun()
                }
                print testNodeNum, ",",APCVec.x[0]
            }     
        }
    } else{
        node[0] newStim = new IClamp(.5)
        newStim.dur = .25
        newStim.del = 5
        newStim.amp = 10
        tstop = 5
        dt = .005
        run()
        tstop = 100
        dt = dt/20
        prevTime = 0
        totalVelocity = 0
        for testNodeNum=20, 80{      
            node[testNodeNum] APCounter = new APCount(.5)
            APCounter.thresh = 0
            APCVec = new Vector()
            APCounter.record(APCVec)
            while(APCounter.n == 0){
                steprun()
            }
            print testNodeNum, ",",APCVec.x[0]
            if(prevTime == 0){
                prevTime = APCVec.x[0]
            }else{
                totalVelocity += (deltax/(APCVec.x[0] - prevTime)/1000)
                prevTime = APCVec.x[0]
            }
        }
        totalVelocity = totalVelocity/61
        print "AVG Velocity,", totalVelocity
    }
}

proc stdurationFinder(){ local lowAmp, highAmp, ampRes, pulseWidth, testAmp
    // stdurationFinder(low amplitude, high amplitude, amplitude resolution, pulse width)
    // This is meant as a way to find the strength duration curve for any waveform
    // This is usually done with varying pusle widths, but that could also be a pulse
    //  with a sine or triangular shape as opposed to the normal square wave
    
    // read parameters
    lowAmp = $1
    highAmp = $2
    ampRes = $3
    pulseWidth = $4

    // setup initial parameters
    dur1 = pulseWidth   // set the pulsewidth
    onset1 = 0          // set the wave to start at time=0
    call_procstim()
    setStim(0,0,0)  // turn off the test stimulus from the threshfinder

    print "LOW, HIGH, TEST, AP? (1 yes 0 no)"

    while(abs(lowAmp - highAmp) > ampRes){  // binary search
        testAmp = (lowAmp + highAmp)/2      // find the midpoint
        setAmps(testAmp)    // set amplitude of the waveform to the testing amplitude

        // run the test
        APC_reset()     // reset the AP count objects
        run()

        // check if there was an AP
        if(APC_getCount(0) > 0){
            // there was an AP so we should lower the amplitude
            print lowAmp, ",", highAmp, ",", testAmp, ",1"
            highAmp = testAmp
        } else{
            // there was no AP so we should raise the amplitude
            print lowAmp, ",", highAmp, ",", testAmp, ",0"
            lowAmp = testAmp
        }
    }
    print "MIN AMP FOR AP,", highAmp
}

proc setSquareWaveFreq(){ local pulseDur
    freq = $1
    pulseDur = (1/(freq/1000))/2
    cathod_dur=pulseDur
    postCathod_dur=0
    anod_dur=pulseDur
    postAnod_dur=0
}

proc findMinFreq(){ local maxFreq, minFreq, blockThreshold
    // findMinFreq takes the current setup and tries to 
    // find the minimum frequency at which block can still occur
    // The search space will be the range of frequencies from 0 to 10kHz
    
    // OPTIONAL ARGUMENT the resolution of the search
    if (numarg() > 0) {
        res = $1
    } else {
        res = 100
    }

    // set the initial search boundaries
    maxFreq = 10000
    minFreq = 0
    // begin search
    while (abs(maxFreq - minFreq) > res){
        freq = (maxFreq + minFreq)/2       
        print "TESTING FREQUENCY,", freq
        if (wavesel[0]){
            setSquareWaveFreq(freq)
        }

        // now we find the threshold, note that a larger resolution is used because we simply
        //  need to have enough trials to state that the threshold exists
        blockThreshold = findThreshold(0,1000000,0,10,50,.1,1,20000)

        // if there was no block found, then the blockThreshold is set to 0
        if (blockThreshold > 0){
            // block occured, the frequency can be lowered
            maxFreq = freq
        } else {
            // block did not occur, the frequency must be raised
            minFreq = freq
        }
    }
    print "MIN FREQUENCY FOR BLOCK,", maxFreq
}

func findMaxGap(){ local dcAmp, hfAmp, freq, onset, gapTime, maxGap, minGap localobj apc
    // This will find the maximum gap that still reduces the onset of the high frequency stimulation
    // the following shows the three parameters passed
    dcAmp = $1
    hfAmp = $2
    freq = $3
    
    // create the electrode setup
    turnOnCustomElectrodes()    // this experiment uses custom electrodes
    createElectrode(5,0,1000)   // electrodes[0] is a DC electrode 
                                //  centered at x=0 and 1mm from the axon
    createElectrode(0,0,1000)   // electrodes[1] is a Sine electrode
                                //  centered at x=0 and 1mm from the axon
    // electrode parameters
    electrodes[0].setDel(10)    // DC has 10ms delay
    electrodes[0].setDur(20)    // DC has 20ms duration ending at t=30ms
    electrodes[1].setDel(30)    // HF has 30ms delay starting immediately after DC
    electrodes[1].setDur(300)   // HF continues for the rest of the simulation
    electrodes[0].setAmp(dcAmp) // set DC amp to passed value
    electrodes[1].setAmp(hfAmp) // set HF amp to passed value
    electrodes[1].setFreq(freq) // set HF freq to passed value

    // find initial amount of onset
    setStim(0,0,0)  // turn off the test stimulus from the threshfinder
    APC_reset()     // reset the Action Potential Counters (APCs)
    electrodes[0].setAmp(0) // turn off DC electrode
    run()                   
    onset = APC_getCount(0) // save the number of onset spikes
    electrodes[0].setAmp(dcAmp) // turn on DC electrode

    // begin search
    maxGap = 30     // the largest gap will be at most 30ms
    minGap = 0     
    while(abs(maxGap-minGap)>.1){   // keep searching down to a resolution of <.1ms
        gapTime = (maxGap + minGap)/2   // binary search between the max and min time
        print "Testing gap,",gapTime
        electrodes[1].setDel(30+gapTime)    // set new delay of HF
        APC_reset()
        run()
        if((APC_getCount(0)-1) < onset){    // less onset than control
            minGap = gapTime            // increase the gap time
        }else{                         
            maxGap = gapTime            // otherwise decrease gap time
        }
    }

    // clean up simulation environment
    removeElectrode(1)
    removeElectrode(0)

    return minGap
}

func findMaxCarryover(){ local onset, gapTime, maxGap, minGap localobj testAP
    // This will find the maximum time after high frequency is turned off that still blocks an AP
    
    // create the electrode setup
    turnOnCustomElectrodes()    // this experiment uses custom electrodes
    createElectrode(0,0,1000)   // electrodes[1] is a Sine electrode
                                //  centered at x=0 and 1mm from the axon
    // electrode parameters
    electrodes[0].setDel(10)
    electrodes[0].setDur(50)
    electrodes[0].setFreq(10000)
    electrodes[0].setAmp(700000)

    // measure the onset from the high frequency
    setStim(0,0,0)
    APC_reset()
    run()                   
    onset = APC_getCount(0) // save the number of onset spikes

    // setup objects for creating and measuring APs
    node[0] testAP = new IClamp(.5)
    testAP.dur = 0.1
    testAP.amp = 10
    APC_reset()     // reset the Action Potential Counters (APCs)

    // begin search
    maxGap = 30     // the largest gap will be at most 30ms
    minGap = -5
    tstop = 60 + maxGap
    while(abs(maxGap-minGap)>.1){   // keep searching down to a resolution of <.1ms
        gapTime = (maxGap + minGap)/2   // binary search between the max and min time
        print "Testing gap,",gapTime
        testAP.del = 60+gapTime    // set new delay of HF
        APC_reset()
        run()
        if(APC_getCount(1) == onset){    // less onset than control
            minGap = gapTime            // increase the gap time
        }else{                         
            maxGap = gapTime            // otherwise decrease gap time
        }
    }

    // clean up simulation environment
    removeElectrode(0)

    return minGap
}

proc findFiringFreq(){local minFreq, maxFreq, freqInc, testAmp, testFreq, numAPs, elecType localobj APCVec 
    // find the firing frequency over a range of frequencies and a given amplitude
    // this will use any given wave
    // See documentation for waveform number (custom electrode configuration)
    // findFiringFreq(minFreq,maxFreq,freqInc,amplitude,waveform)
    minFreq = $1
    maxFreq = $2
    freqInc = $3
    testAmp = $4
    elecType = $5
    interuptedWave = 0

    // additional work for doing an interrupted waveform
    // This is specifically for varying frequencies of a square wave pulse
    //  it will have a 50us pulse that has both cathode and anode (essentially a 2kHz pulse)
    if(elecType == 6){
        interuptedWave = 1
        elecType = 2
    }

    // set square wave
    turnOnCustomElectrodes()
    createElectrode(elecType,0,1000)   // see documentation for waveform number
    electrodes[0].setAmp(testAmp)
    electrodes[0].setDel(10)
    electrodes[0].setDur(500)

    // setup for runs
    setStim(0,0,0)
    testFreq = minFreq

    print "outputs given in order"
    print "1. stimulation frequency"
    print "2. action potential frequency"
    print "This was at ", testAmp, "nA"
    // check frequencies in increments of freqInc
    while(testFreq<=maxFreq){
        if(interuptedWave == 0){
            // uninterupted waveforms can use the setFreq() method
            electrodes[0].setFreq(testFreq)
        }else{
            // interupted waveforms need the parts of the waveform set individually
            //      +---+               +---+
            // -----+   +   +-----------+   +   +--------
            //          +---+               +---+
            // ^ This is what the waveform will look like
            stdinit()   // reset stops a seg fault
            electrodes[0].electrodeModel.cathod_dur = 0.05
            electrodes[0].electrodeModel.anod_dur = 0.05
            dur = ((1/testFreq * 1000)-0.1)
            electrodes[0].electrodeModel.postcathod_dur = 0
            electrodes[0].electrodeModel.postanod_dur = dur
        }
        stdinit()
        continuerun(100)    // run first 100ms
                            // this should allow us to reach a stable firing rate

        APC_reset() // reset out AP counters
        APCVec = new Vector()
        apcProximal.record(APCVec)
        continuerun(500)    // run until a total of 500ms of simulation have occurred
        numAPs = APC_getCount(1)
        print testFreq, ", ", (numAPs*2.5)
        for i=0, APCVec.size()-1{
            print APCVec.x[i]
        }
        testFreq += freqInc
    }
    removeElectrode(0)
    turnOffCustomElectrodes()
}