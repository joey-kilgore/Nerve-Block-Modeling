// Multiple_Simulations is a compilation of multiple tests each having a specific purpose
// These tests are not meant to be run from a UI but are instead a predefined set of instructions
//  that will often run multiple simulations and from this try and show some effect in the simulatins
//  They could be as simple as finding a block threshold across changing frequencies or changing diameters
//  The point is that these procedures are set simulations each having a specific experiment they conduct

proc varyGnabar(){
    // varyGnabar looks at the gnabar (Na conductance) variable, and shows what occurs when the
    //  value is changed from its initial state (3.0) to 3.3
    
    // Initial Conditions for Experiment :
    // Number of electrodes = 1
    // Waveform shape = Sine wave
    // offset = 0nA
    // Frequency = 10kHz
    // Amplitude = 600000nA (known block)
    // pulse train onset = 10ms 
    // pulse train duration = 300ms

    // Number of axonnodes = 101
    // axon diameter = 10um
    // dt = .005ms
    // Tstop = 150ms
    // init = -80mV

    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set frequency
    freq = 10000
    // set the amplitude
    amp1 = 576000
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()

    // set tstop
    tstop = 150
    // set initial voltage
    v_init = -80

    // turn off test stimulus
    setStim(0,0,0)

    // Two simulations will be run.
    // The first will have the default value of gnabar (3.0)
    // The second will have the value of 3.3 for gnabar for all axnodes
    firstGnabar = 3.0
    secondGnabar = 3.3
    
    // First simulation
    setGnabarForAllAxnodes(firstGnabar)
    run()
    // Second simulation
    setGnabarForAllAxnodes(secondGnabar)
    run()
}

proc setGnabarForAllAxnodes(){
    // set gnabar value for all axnodes in the model
    for i=0,axonnodes-1 {
        node[i].gnabar_axnode = $1
    }
}

proc setGnabarForSomeAxnodes(){
    // set gnabar value for axnodes within a certain range from the center
    //  the range is the value passed
    //  for example if 5 is passed as a parameter, than the center node
    //   is changed to the value, and nodes 5 to the left and right are also set
    
    rangeNum = $1
    valueNum = $2

    // set value of center node
    node[(axonnodes-1)/2].gnabar_axnode = valueNum

    // loop through the range
    for(i=1; i<=rangeNum; i = i+1){
        // set the nodes to the left and right to the value passed
        node[(axonnodes-1)/2 + i].gnabar_axnode = valueNum
        node[(axonnodes-1)/2 - i].gnabar_axnode = valueNum
    }

}

proc changeGnabarFromCenter(){
    // this experiment looks at how adjusting the gnabar value effects the block threshold
    // This starts by changing only the center node, then
    //  increases the number of nodes changed on each side of the center node
    // One parameter passed, the value that the center nodes gnabar will be set to

    // Set the waveform to sine wave
    waveform_sel(1)
    // Set the offset to 0
    setoffset(0)
    // set frequency
    freq = 10000
    // set the amplitude
    amp1 = 576000
    // set the pulse train onset
    onset1 = 10
    // set the pulse train duration
    dur1 = 300
    // update sine parameters
    sinestim()

    // first run the findThreshold with no changed gnabar values
    setGnabarForAllAxnodes(3.0)
    print "No changed nodes"
    findThreshold(400000,600000,0,10,50,.1,1,1000)

    // loop till 14 nodes on each side of the center node, and the center node have changed 
    for(numNodes=0; numNodes<15; numNodes=numNodes+2){
        // reset all gnabar values
        setGnabarForAllAxnodes(3.0)
        // set the values for center nodes
        setGnabarForSomeAxnodes(numNodes,$1)
        // print the set being tested
        print "Range of set nodes", numNodes
        // find the block threshold
        findThreshold(400000,600000,0,10,50,.1,1,2000)
    }
}

objref apVector1
objref apVector2
proc onsetDCSine(){
    // Set the waveform to DC sine wave
    waveform_sel(4)

    // First the setup needs to determine what the DC block threshold is
    dconset = 10
    dcdur = 200
    sineonset = 0
    sinedur = 0
    dcsinestim()
    // Now the block threshold for a purely DC current is calculated
    dcblock = findThreshold(-307812.5, -300000, 0, 10, 50, .1, 1, 1000)

    // Second the setup needs to determing the sine block threshold
    dconset = 0
    dcdur = 0
    sineonset = 10
    sinedur = 200
    sinef = 10000
    dcsinestim()
    // Now the block threshold for a purely Sinusoidal current is calculated
    sineblock = findThreshold(575000, 578125, 0, 10, 50, .1, 1, 1000)

    apVector1 = new Vector()
    apVector2 = new Vector()
    apcDistal.record(apVector1)
    apcProximal.record(apVector2)

    for mult=0, 5{
        dconset = 10
        dcdur = 90
        dcamp = dcblock*mult
        sineonset = dconset+dcdur
        sinedur = 100
        sinef = 10000
        sineamp = sineblock
        dcsinestim()
        tstop = 200
        setStim(0,0,0)
        run()
        print dcamp, dcdur, sineonset
        print "Distal (left)"
        for i=0, apVector1.size()-1{
            print apVector1.x[i]
        }
        print "Proximal (right)"
        for i=0, apVector2.size()-1{
            print apVector2.x[i]
        }
    }
}