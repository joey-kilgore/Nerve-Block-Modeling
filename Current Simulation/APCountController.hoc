// The APCountController is used in tandom with the ThreshFinder.hoc
//  while testing various waveforms to check for blocking APs
//  these procs, and funcs, will provide the ability to check
//  the number of action potentials

// Setup for the APCount objects (in the apc array)
// number of AP counters
numAPCs = 2	

// create objects to store ap count
objref apcDistal
objref apcProximal	

func APC_connect(){
    // creates a new APCount object in node 5, which counts the # of 
    //  times Vm crosses the threshold in the positive direction
    node[2] {
        apcDistal = new APCount(.5)
    }
    // creates a new APCount object in second to last node
    node[axonnodes-2] {
        apcProximal = new APCount(.5)  
    }
    return 0
}

func APC_setThresh(){
    // APC_setThresh(threshold (mV))
    // Sets the threshold for all APCount objects in apc
    apcDistal.thresh = $1
    apcProximal.thresh = $1
    return 0
}

func APC_reset(){
    // Resets the count and time for all APCount objects
    APC_connect()
    APC_resetCount()
    APC_resetTime()
    return 0
}

func APC_resetCount(){
    // Sets all counts back to 0
    apcDistal.n = 0
    apcProximal.n = 0
    return 0
}

func APC_resetTime(){
    // Sets all times for last AP to 0
    apcDistal.time = 0
    apcProximal.time = 0
    return 0
}

func APC_getCount(){
    // APC_getCount(index of apc to get count from)
    // return the distal count if param = 0
    // return the proximal count if param = 1
    if($1==0) return apcDistal.n
    if($1==1) return apcProximal.n
    // if the index isnt 1 or 0 return -1
    return -1
}

func APC_getTime(){
    // APC_getTime(index of apc to get count from)
    // return the distal tme if param = 0
    // return the proximal time if param = 1
    if($1==0) return apcDistal.time
    if($1==1) return apcProximal.time
    // if the index isnt 1 or 0 return -1
    return -1
}