
//***************************************************************
//  variables
//***************************************************************

/*Create and initialize sections and point processes*/
create trielec[3]
objref triClmp[3]

for (i=0; i<3; i+=1){ 
    triClmp[i] = new IClampTri()
}

// triangluar waveform box
objref tribox		
tribox=new VBox()


//*********************************************************************
//  triangular waveform and their handling routines
//*********************************************************************

proc tribox_Vbox(){

		tribox.intercept(1)
		xpanel("")
		xvalue("Amplitude Elec2(nA)","triamp",1,"tri_val()",1)
		xvalue("Frequency(1/s)","freq",1,"tristim()",1)
		xvalue("offset(nA)","offset",1,"tristim()",1)
		xpanel()
		tribox.intercept(0)
}

proc tri_panel(){

	if(tribox.ismapped() == 0) {
		tribox.map("Triagular Wave Parameters", 30, 465, -1, -1)
	}

	
	tri_val()
	tristim()
}


proc tri_val(){

    	if (electsel[0]==1){
       	amp1=triamp
        	amp2 = 0
    		amp3 = 0
     	}  
    	if (electsel[1]==1){
       	amp1=triamp
        	amp2 = -1*amp1
    		amp3 = 0
    	}
	if (electsel[2]==1){
       	amp2=triamp
	   	amp1 = -.5*amp2
	   	amp3 = amp1
    	}

	tristim()
 
}

proc tristim(){

	trielec[0] {
		triClmp[0].loc(0.5)
		triClmp[0].del=onset1
		triClmp[0].amp=amp1
		triClmp[0].dur=dur1
		triClmp[0].freq = freq
		triClmp[0].offset = offset
	}

	trielec[1] {		
		triClmp[1].loc(0.5)
		triClmp[1].del=onset2
		triClmp[1].amp=amp2
		triClmp[1].dur=dur2
		triClmp[1].freq = freq
		triClmp[1].offset = offset
	}
	
	trielec[2] {
		triClmp[2].loc(0.5)
		triClmp[2].del=onset3
		triClmp[2].amp=amp3
		triClmp[2].dur=dur3
		triClmp[2].freq = freq
		triClmp[2].offset = offset
	}
}

proc triAdvance() {
	a = 0
	for (i=0;i<=axontotal-1;i=i+stinnum+5) {	
		node[a].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i]*1e-6)+ (triClmp[1].i*ext2.x[i]*1e-6)+ (triClmp[2].i*ext3.x[i]*1e-6) //mV//
		a = a+1
	}

	b=0 
	for (i=1;i<=axontotal-1;i=i+stinnum+5) {
		MYSA[b].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i]*1e-6)+ (triClmp[1].i*ext2.x[i]*1e-6)+ (triClmp[2].i*ext3.x[i]*1e-6) //mV//
		b=b+2
	}
	
	c=0 
	for (i=2;i<=axontotal-1;i=i+stinnum+5) {
		FLUT[c].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i]*1e-6)+ (triClmp[1].i*ext2.x[i]*1e-6)+ (triClmp[2].i*ext3.x[i]*1e-6) //mV//
		c=c+2
	}

	for (j = 0;j<=stinnum-1;j=j+1) {
		d=j 
		for (i=3;i<=axontotal-1;i=i+stinnum+5) {
			STIN[d].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i+j]*1e-6)+ (triClmp[1].i*ext2.x[i+j]*1e-6)+ (triClmp[2].i*ext3.x[i+j]*1e-6) //mV//
			d=d+stinnum
		}
	}

	k=1 
	for (i=9;i<=axontotal-2;i=i+stinnum+5) {
		FLUT[k].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i]*1e-6)+ (triClmp[1].i*ext2.x[i]*1e-6)+ (triClmp[2].i*ext3.x[i]*1e-6) //mV//
		k=k+2
	}
	
	l=1
	for (i=10;i<=axontotal-2;i=i+stinnum+5) {
		MYSA[l].e_extracellular(0.5)=(triClmp[0].i*ext1.x[i]*1e-6) + (triClmp[1].i*ext2.x[i]*1e-6)+ (triClmp[2].i*ext3.x[i]*1e-6)
		l=l+2
	}
}

//***************************************************************
//  main
//***************************************************************

tribox_Vbox()
tristim()


