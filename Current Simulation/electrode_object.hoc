// This object is used in conjunction with the electrode controller
// allowing for the user to create any type of electrode easily

begintemplate Electrode
    public calcVoltage              // these are two different ways of calculating extracellular voltage
    public calcVoltageCompartment   // the compartment version is made to be more efficient

    public setAmp       // setters for various electrode params    
    public setFreq  
    public setDur
    public setDel
    public printData

    public electrodeModel   // the model is public knowledge

    external axontotal  // external variables needed
    external rhoe       //  these are used during the distance calculation
    external x          //   (see setPos())

    create electrodeSection // all point processes need to be within a section
    objref electrodeModel
    objref  ext // store the distance calculation for the electrdoes
    index = -1
    xpos = -1
    ypos = -1
    
    proc init(){
        // electrodes are created with 4 parameters
        index = $1      // the index of the electrode
        modelNum = $2   // model type 0=Sine, 1=Triangle, 2=Square, 3=Sine Ramp, 4=DCSine, 5=DC
        xpos = $3
        ypos = $4
        
        if (modelNum==0){
            electrodeSection{
                electrodeModel = new IClampSine(.5)
                electrodeModel.amp = 1000000
                electrodeModel.f = 10000
                electrodeModel.offset = 0
                electrodeModel.del = 0
                electrodeModel.dur = 300
            }
        }else if (modelNum==1){
            electrodeSection{
                electrodeModel = new IClampTri(.5)
            }
        }else if (modelNum==2){
            electrodeSection{
                electrodeModel = new Bi_trainIClamp(.5)
            }
        }else if (modelNum==5){
            electrodeSection{
                electrodeModel = new Bi_trainIClamp(.5)
                electrodeModel.del = 10
                electrodeModel.train = 100
                electrodeModel.cathod_dur = 100
                electrodeModel.postcathod_dur = 0
                electrodeModel.anod_dur = 0
                electrodeModel.postanod_dur = 0
                electrodeModel.high_amp = -300000
            }
        }
        setPos()
    }

    func calcVoltage(){ 
        // calculate the voltage at a particular point from the electrode
        x = $1
        y = $2
        return electrodeModel.i * (rhoe/(4*PI*sqrt((ypos-y)^2 + (xpos-x)^2))) *1e-6
    }
    
    func calcVoltageCompartment(){
        // calculates the voltage for a particular compartment (using the indexing in x)
        //  this is faster than using the calcVoltage
        //  the index is passed as a parameter
        return electrodeModel.i * ext.x[$1] 
    }

    proc setPos(){ local i
        // do the calculation for all distances to the compartments ahead of time
        ext = new Vector(axontotal,0)
        for i=0, axontotal-1{
            ext.x[i] = (rhoe)/(4*PI*sqrt((ypos^2)+((xpos-x.x[i])^2)))*1e-6	//nV//
        }
    }

    proc setAmp(){
        // sets the amplitude of the electrode depending on the electrode type
        // the amplitude in nA is passed as the only parameter
        if (modelNum==0){   // sine electrode
            electrodeModel.amp = $1
        }else if(modelNum==1){  // tri electrode
            electrodeModel.amp = $1
        }else if(modelNum==2){  // square electrode
            electrodeModel.high_amp = $1
            electrodeModel.low_amp  = $1
        }else if(modelNum==5){  // DC electrode
            electrodeModel.high_amp = $1
        }
    }

    proc setFreq(){
        // sets the frequency of the elctrode which depends on the electrode type
        // the frequency in Hz is the only parameter
        if (modelNum==0){   // sine Electrode
            electrodeModel.f = $1
        }else if(modelNum==1){  // tri electrode
            electrodeModel.freq = $1
        }else if(modelNum==2){  // square electrode
            electrodeModel.cathod_dur = 1/($1*1000*2)   // half period in ms
            electrodeModel.postcathod_dur = 0
            electrodeModel.anod_dur = 1/($1*1000*2)
            electrodeModel.postanod_dur = 0
        }else if(modelNum==5){  // DC electrode
            print "ERROR: CAN NOT SET FREQUENCY OF DC ELECTRODE"
        }
    }

    proc setDur(){
        // sets the duration of the elctrode which depends on the electrode type
        // the duration in ms is the only parameter
        if (modelNum==0){   // sine Electrode
            electrodeModel.dur = $1
        }else if(modelNum==1){  // tri electrode
            electrodeModel.dur = $1
        }else if(modelNum==2){  // square electrode
            electrodeModel.train = $1
        }else if(modelNum==5){  // DC electrode
            electrodeModel.train = $1
        }
    }

    proc setDel(){
        // sets the delay of the elctrode which depends on the electrode type
        // the delay in ms is the only parameter
        if (modelNum==0){   // sine Electrode
            electrodeModel.del = $1
        }else if(modelNum==1){  // tri electrode
            electrodeModel.del = $1
        }else if(modelNum==2){  // square electrode
            electrodeModel.del = $1
        }else if(modelNum==5){  // DC electrode
            electrodeModel.del = $1
        }
    }

    proc printData(){
        print "Index, ", index
        print "Electrode Model, ", electrodeModel
        print "xpos, ypos, ", xpos, ",", ypos
    }
endtemplate Electrode