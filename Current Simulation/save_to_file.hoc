// saveValuesToFile checks which values have been selected to save (save_to_file_UI.hoc)
// then calls the respective append to file procs for each value
proc saveValuesToFile(){
    if(valueToSaveSelected[0] == 1) appendNodeMGateToFile()
    if(valueToSaveSelected[1] == 1) appendNodeHGateToFile()
    if(valueToSaveSelected[2] == 1) appendNodeVoltageToFile()
    if(valueToSaveSelected[3] == 1) appendNodeSGateToFile()
    if(valueToSaveSelected[4] == 1) appendNodeINaToFile()
    if(valueToSaveSelected[5] == 1) appendNodeIKToFile()
    if(valueToSaveSelected[6] == 1) appendNodeILToFile()
    if(valueToSaveSelected[7] == 1) appendNodeMPGateToFile()
    if(valueToSaveSelected[8] == 1) appendNodeINaPToFile()
    if(valueToSaveSelected[9] == 1) appendMYSAToFile()
    if(valueToSaveSelected[10] == 1) appendFLUTToFile()
    if(valueToSaveSelected[11] == 1) appendSTINToFile()
}

// append the voltages of all nodes to file
// note that the file object fil must already have been created
// and it must be set to append by calling fil.aopen()
proc appendNodeVoltageToFile(){
    // print the time
    fileVoltage.printf("%f,", t)

    // loop through all nodes
    for i=0,axonnodes-1 {
        // Print the value of each node voltage to file and using a comma as the seperator
        fileVoltage.printf("%f,", node[i].v)
    }
    // put a new line at the end of the list of node voltages
    fileVoltage.printf("\n")
}

// append the m gate values of all nodes to file
// note that the file object fil must already have been created
// and it must be set to append by calling fil.aopen()
proc appendNodeMGateToFile(){
    // print the time
    fileMGate.printf("%f,", t)

    // loop through all nodes
    for i=0, axonnodes-1 {
        // Print the node m gate value to file using a comma seperator
        fileMGate.printf("%f,", node[i].m_axnode)
    }
    // put a new line at the end of the list
    fileMGate.printf("\n")
}

// append the h gate values of all nodes to file
// note that the file object fil must already have been created 
// and it must be set to append by calling fil.aopen()
proc appendNodeHGateToFile(){
    // print the time
    fileHGate.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node h gate value to file using a comma seperator
        fileHGate.printf("%f,", node[i].h_axnode)
    }
    // put a new line at the end of the list
    fileHGate.printf("\n")
}


proc appendNodeSGateToFile(){
    // print the time
    fileSGate.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node s gate value to file using a comma seperator
        fileSGate.printf("%f,", node[i].s_axnode)
    }
    // put a new line at the end of the list
    fileSGate.printf("\n")
} 

proc appendNodeINaToFile(){
    // print the time
    fileINa.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node ina value to file using a comma seperator
        fileINa.printf("%f,", node[i].ina_axnode)
    }
    // put a new line at the end of the list
    fileINa.printf("\n")
} 

proc appendNodeIKToFile(){
    // print the time
    fileIK.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node ik value to file using a comma seperator
        fileIK.printf("%f,", node[i].ik_axnode)
    }
    // put a new line at the end of the list
    fileIK.printf("\n")
} 

proc appendNodeILToFile(){
    // print the time
    fileIL.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node il value to file using a comma seperator
        fileIL.printf("%f,", node[i].il_axnode)
    }
    // put a new line at the end of the list
    fileIL.printf("\n")
} 

// append the m gate values of all nodes to file
// note that the file object fil must already have been created
// and it must be set to append by calling fil.aopen()
proc appendNodeMPGateToFile(){
    // print the time
    fileMPGate.printf("%f,", t)

    // loop through all nodes
    for i=0, axonnodes-1 {
        // Print the node m gate value to file using a comma seperator
        fileMPGate.printf("%f,", node[i].mp_axnode)
    }
    // put a new line at the end of the list
    fileMPGate.printf("\n")
}

proc appendNodeINaPToFile(){
    // print the time
    fileINaP.printf("%f,", t)

    for i=0, axonnodes-1 {
        // Print the node ina value to file using a comma seperator
        fileINaP.printf("%f,", node[i].inap_axnode)
    }
    // put a new line at the end of the list
    fileINaP.printf("\n")
} 

proc appendMYSAToFile(){
    // print the time
    fileMYSA.printf("%f,", t)

    for i=0, paranodes1-1 {
        // Print the MYSA voltage to file using a comma seperator
        fileMYSA.printf("%f,", MYSA[i].v)
    }
    // put a new line at the end of the list
    fileMYSA.printf("\n")
}

proc appendFLUTToFile(){
    // print the time
    fileFLUT.printf("%f,", t)

    for i=0, paranodes2-1 {
        // Print the FLUT voltage to file using a comma seperator
        fileFLUT.printf("%f,", FLUT[i].v)
    }
    // put a new line at the end of the list
    fileFLUT.printf("\n")
}

proc appendSTINToFile(){
    // print the time
    fileSTIN.printf("%f,", t)

    for i=0, axoninter-1 {
        // Print the STIN voltage to file using a comma seperator
        fileSTIN.printf("%f,", STIN[i].v)
    }
    // put a new line at the end of the list
    fileSTIN.printf("\n")
}