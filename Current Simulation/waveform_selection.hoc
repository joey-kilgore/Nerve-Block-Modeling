// *******************************************************************************************
// Waveform selection box 
// *******************************************************************************************


//***************************************************************
//  variables
//***************************************************************
double wavesel[5]			// selection flag to pick square, sine, triangle

//Initialize state variables to sine wave
wavesel[0] = 0	//square wave
wavesel[1] = 1	//sine wave
wavesel[2] = 0	//triangle wave
wavesel[3] = 0	//sine ramp

//***************************************************************
//  external files
//***************************************************************
load_file("sine_waveform.hoc")					// select waveform
load_file("triangle_waveform.hoc")					// select waveform
load_file("square_waveform.hoc")					// select waveform

//***************************************************************
//  procedures
//***************************************************************
proc Selec_waveform(){
	selectbox.intercept(1)
	xpanel("Choose Waveform Type")
	
	xcheckbox("Square",&wavesel[0], "waveform_sel(0)")
	xcheckbox("Sine",&wavesel[1], "waveform_sel(1)")
	xcheckbox("Triangle",&wavesel[2], "waveform_sel(2)")
	xcheckbox("Sine Ramp",&wavesel[3], "waveform_sel(3)")
	xpanel()
	selectbox.intercept(0)
	selectbox.map("Choose Waveform Type",24, 156, -1, -1)
}

proc waveform_sel(){

	// unmap and uncheck the unused electrodes
	if ($1!=0){  // not square
		wavesel[0] = 0
     		state_unbal=0
     		state_bal=0

		// unmap all the square waveform boxes
		unbalbox1.unmap()
		unbalbox2.unmap()
		unbalbox3.unmap()
		balancedbox1.unmap()
		balancedbox2.unmap()
		balancedbox3.unmap()
		tiedbox.unmap()
		indebox2.unmap()
		indebox3.unmap()
		Squarewave.unmap()

	}
	if ($1!=1){  // not sine
		wavesel[1] = 0
		state_sin=0


		// unmap and sine waveform boxes
		sinebox.unmap()
		wavesel[1] = 0
		wavesel[2] = 0

	}
	if ($1!=2){  // not triangle
		wavesel[2] = 0
		state_tri=0
		tribox.unmap()

	}
	if ($1!=3){  // not sine ramp
		wavesel[3] = 0
	}

	// map and check the used electrodes
	if ($1==0){  // square
		wavesel[0] = 1
		Squarewave_proc()

		// open tied onset window
		Tied_onset()
		balance_proc()

	}
	if ($1==1){  // sine
		wavesel[1] = 1
     	state_sin = 1
		sine_panel()
	}
	if ($1==2){  //triangle
		wavesel[2] = 1
		state_tri = 1
		tri_panel()
	}
	if ($1==3){  // sine ramp
		wavesel[3] = 1
		traj_panel()
	}



}


/*Call_procstim and call_procs keep waveform variables consistent with values in input windows.*/
proc call_procstim(){
	squarestim()
	sinestim()
	tristim()
}

proc call_procs(){
	// one electrode
	if($1 == 1){
		
		if (state_bal) bal_val1() 
		if (state_unbal) unbal_val1()
	    if (state_sin) sin_val1()
        if (state_tri) tri_val()
		
		frequency_readout = 1000*(1/(cathod_dur+postCathod_dur+anod_dur + postAnod_dur)) //1000=conversion from ms to 1/s
						//I'm writing this code here so that it gets called everytime that waveform parameters change
	}

	// two electrodes
	if($1 == 2){
		
		if (state_bal) bal_val2() 
		if (state_unbal) unbal_val2()
	    if (state_sin) sin_val2()
        if (state_tri) tri_val()

		frequency_readout = 1000*(1/(cathod_dur+postCathod_dur+anod_dur + postAnod_dur)) //1000=conversion from ms to 1/s
						//I'm writing this code here so that it gets called everytime that waveform parameters change
	}

	// three electrodes
	if($1 == 3){
		
		if (state_bal) bal_val3() 
		if (state_unbal) unbal_val3()
	    if (state_sin) sin_val3()
        if (state_tri) tri_val()

		frequency_readout = 1000*(1/(cathod_dur+postCathod_dur+anod_dur + postAnod_dur)) //1000=conversion from ms to 1/s
						//I'm writing this code here so that it gets called everytime that waveform parameters change
	}
}

//***************************************************************
//  main
//***************************************************************
Selec_waveform()
waveform_sel(1)

